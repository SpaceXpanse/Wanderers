# Copyright (c) Martin Schweiger
# Licensed under the MIT License

cmake_minimum_required(VERSION 3.19)

# Set the project name
project (SpaceXpanse VERSION 21.7.24)

# Allow building targets as external projects
include(ExternalProject)

# Some functions to simplify debugging CMake scripts
include(CMakePrintHelpers)

# Support for including runtime libraries in packages
set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE)
include(InstallRequiredSystemLibraries)

# Set the pools for compilers that can't run concurrently
set_property(GLOBAL PROPERTY JOB_POOLS latex=1 soffice=1 htmlhelp=1)

# Group projects in VS
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Locally defined cmake modules
set(CMAKE_MODULE_PATH
	${CMAKE_SOURCE_DIR}/cmake
	${CMAKE_MODULE_PATH}
)

if(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit build?
	set(BUILD64 1)
	set(ARCH "x64")
	set(PLATFORM_STRING "x64")
else()
	set(BUILD64 0)
	set(ARCH "x86")
	set(PLATFORM_STRING "Win32")
endif()

if (NOT ${CMAKE_GENERATOR} STREQUAL "Ninja")
	message(STATUS "USING: MultiCore VS Solution")
	set(CompileFlags "/MP")
else()
	message(STATUS "USING: Ninja Configuration")
	set(CompileFlags "")
endif()

# Define directories and file paths for some common binaries
set(OVP_DIR "${CMAKE_SOURCE_DIR}/OVP")
set(GDICLIENT_DIR "${OVP_DIR}/GDIClient")

set(SPACEXPANSE_SOURCE_ROOT_DIR ${CMAKE_SOURCE_DIR})
set(SPACEXPANSE_SOURCE_DIR ${SPACEXPANSE_SOURCE_ROOT_DIR}/Src/SpaceXpanse)
set(SPACEXPANSE_SOURCE_MODULE_DIR ${SPACEXPANSE_SOURCE_ROOT_DIR}/Src/Plugin)
set(SPACEXPANSE_SOURCE_SDK_DIR ${SPACEXPANSE_SOURCE_ROOT_DIR}/SpaceXpansesdk)
set(SPACEXPANSE_SOURCE_SDK_INCLUDE_DIR ${SPACEXPANSE_SOURCE_SDK_DIR}/include)
set(SPACEXPANSE_SOURCE_HTML_DIR ${SPACEXPANSE_SOURCE_ROOT_DIR}/Html)

set(SPACEXPANSE_BINARY_ROOT_DIR ${CMAKE_BINARY_DIR})
set(SPACEXPANSE_BINARY_CONFIG_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Config)
set(SPACEXPANSE_BINARY_MESH_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Meshes)
set(SPACEXPANSE_BINARY_MODULE_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Modules)
set(SPACEXPANSE_BINARY_STARTUP_DIR ${SPACEXPANSE_BINARY_MODULE_DIR}/Startup)
set(SPACEXPANSE_BINARY_CELBODY_DIR ${SPACEXPANSE_BINARY_MODULE_DIR}/Celbody)
set(SPACEXPANSE_BINARY_PLUGIN_DIR ${SPACEXPANSE_BINARY_MODULE_DIR}/Plugin)
set(SPACEXPANSE_BINARY_VESSEL_DIR ${SPACEXPANSE_BINARY_MODULE_DIR})
set(SPACEXPANSE_BINARY_TEXTURES_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Textures)
set(SPACEXPANSE_BINARY_TEXTURES2_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Textures2)
set(SPACEXPANSE_BINARY_HTML_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Html)
set(SPACEXPANSE_BINARY_DOC_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/Doc)
set(SPACEXPANSE_BINARY_SDK_DIR ${SPACEXPANSE_BINARY_ROOT_DIR}/SpaceXpansesdk)

set(SPACEXPANSE_INSTALL_ROOT_DIR "SpaceXpanse") # This path is relative to CMAKE_INSTALL_PREFIX
set(SPACEXPANSE_INSTALL_MESH_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Meshes)
set(SPACEXPANSE_INSTALL_MODULE_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Modules)
set(SPACEXPANSE_INSTALL_CELBODY_DIR ${SPACEXPANSE_INSTALL_MODULE_DIR}/Celbody)
set(SPACEXPANSE_INSTALL_PLUGIN_DIR ${SPACEXPANSE_INSTALL_MODULE_DIR}/Plugin)
set(SPACEXPANSE_INSTALL_TEXTURES_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Textures)
set(SPACEXPANSE_INSTALL_TEXTURES2_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Textures2)
set(SPACEXPANSE_INSTALL_HTML_DIR  ${SPACEXPANSE_INSTALL_ROOT_DIR}/Html)
set(SPACEXPANSE_INSTALL_DOC_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Doc)
set(SPACEXPANSE_INSTALL_UTILS_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/Utils)
set(SPACEXPANSE_INSTALL_SDK_DIR ${SPACEXPANSE_INSTALL_ROOT_DIR}/SpaceXpansesdk)

set(SPACEXPANSE_SDK_LIB $<TARGET_FILE:SpaceXpansesdk>)
set(SPACEXPANSE_DLGCTRL_LIB $<TARGET_FILE:DlgCtrl>)
set(LUAINTERPRETER_LIB $<TARGET_LINKER_FILE:LuaInterpreter>)
set(GDICLIENT_LIB $<TARGET_LINKER_FILE:GDIClient>)

set(EXTERN_DIR "${CMAKE_SOURCE_DIR}/Extern")

set(ZLIB_VER "1.2.11")
set(ZLIB_DIR "${EXTERN_DIR}/zlib/zlib-${ZLIB_VER}-${ARCH}")
set(ZLIB_INCLUDE_DIR "${ZLIB_DIR}/include")
set(ZLIB_LIB_DIR "${ZLIB_DIR}/lib")
set(ZLIB_LIB "${ZLIB_LIB_DIR}/zlibstatic.lib")

set(Lua_VER "5.1")
set(LUA_DIR "${EXTERN_DIR}/Lua/Lua-${Lua_VER}-${ARCH}")
set(LUA_INCLUDE_DIR "${LUA_DIR}/include")
set(LUA_LIB_DIR "${LUA_DIR}/lib")
set(LUA_DLL_DIR "${LUA_DIR}/dll")
set(LUA_LIB "${LUA_DLL_DIR}/lua${Lua_VER}.lib")

set(DX7SDK_PATH "${EXTERN_DIR}/mssdk_dx7")
set(DX7SDK_INCLUDE_DIR "${DX7SDK_PATH}/include")
set(DX7SDK_LIB_DIR "${DX7SDK_PATH}/lib")

set(HTMLHELP_DIR "${EXTERN_DIR}/Htmlhelp")
set(HTMLHELP_INCLUDE_DIR ${HTMLHELP_DIR}/include)
set(HTMLHELP_LIB_DIR ${HTMLHELP_DIR}/lib-${ARCH})
set(HTMLHELP_LIB ${HTMLHELP_LIB_DIR}/Htmlhelp.lib)

set(SPACEXPANSE_TOOL_MESHC "$<TARGET_FILE:meshc>")
set(LUA_EXE ${LUA_DIR}/bin/lua.exe)
set(ldoc ${LUA_EXE} ${LUA_DIR}/packages/LDoc/ldoc.lua)

find_package(OpenGL QUIET)
find_package(HTMLHelp)
find_package(Doxygen)
find_package(LATEX)		
find_package(MFC)

# We don't query Qt with find_package because we need the 64-bit version here
set(Qt5_x64_DIR
	"Qt5_x64_DIR_NOTFOUND"
	CACHE
	PATH
	"Qt5-x64 installation path."
)

if(MSVC)
  set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /we4311")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:\"LIBCMTD\"")
endif()

# Copy data and binary assets from source to binary tree to provide a working SpaceXpanse environment
add_custom_target(CopyData ALL
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/BinAssets/ ${CMAKE_BINARY_DIR}
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Scenarios/ ${CMAKE_BINARY_DIR}/Scenarios
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Textures/ ${SPACEXPANSE_BINARY_TEXTURES_DIR}
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Meshes/ ${CMAKE_BINARY_DIR}/Meshes
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Script/ ${CMAKE_BINARY_DIR}/Script
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Config/ ${CMAKE_BINARY_DIR}/Config
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/Flights/ ${CMAKE_BINARY_DIR}/Flights
	COMMAND ${CMAKE_COMMAND} -E make_directory ${SPACEXPANSE_BINARY_SDK_DIR}/lib/Lua
	COMMAND ${CMAKE_COMMAND} -E copy ${LUA_DLL_DIR}/lua5.1.lib ${SPACEXPANSE_BINARY_SDK_DIR}/lib/Lua/
	COMMAND ${CMAKE_COMMAND} -E copy ${LUA_DLL_DIR}/lua5.1.dll ${CMAKE_BINARY_DIR} 
) 

add_custom_command(
	OUTPUT SpaceXpanse.cfg
	COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/SpaceXpanse.cfg.
)

install(FILES SpaceXpanse.cfg
	DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
)        
  
add_custom_command(
	OUTPUT keymap.cfg
	COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/keymap.cfg.
)

install(FILES keymap.cfg
	DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
)  
      
set_target_properties(CopyData
	PROPERTIES
	FOLDER Data
)

# =====================================================================================
# work around Html Help compiler bug returning error code

set(HHC_CMD ${CMAKE_CURRENT_BINARY_DIR}/cmake/hhc_fix.bat)
file(TO_NATIVE_PATH "${HTML_HELP_COMPILER}" HHC_PATH_W)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/hhc_fix.bat.in ${HHC_CMD})


# =====================================================================================
# work around pdftex returning an error because of doxygen bug

set(PDFTEX_CMD ${CMAKE_CURRENT_BINARY_DIR}/cmake/pdftex_fix.bat)
file(TO_NATIVE_PATH "${PDFLATEX_COMPILER}" PDFTEX_PATH_W)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/pdftex_fix.bat.in ${PDFTEX_CMD})


# =====================================================================================

set(SpaceXpanseExe_graphics "SpaceXpanse (built-in DX7 graphics engine)")
set(SpaceXpanseExe_ng "SpaceXpanse (graphics server version)")
set(SpaceXpanseExe_both "Both (inline DX7 graphics + graphics server)")

if(BUILD64) # only allow graphics server version on x64 builds

	set(SPACEXPANSE_GRAPHICS ${SpaceXpanseExe_ng})

else()

	set(SPACEXPANSE_GRAPHICS
		${SpaceXpanseExe_graphics}
		CACHE
		STRING
		"SpaceXpanse executables to be built."
	)
	set_property(CACHE SPACEXPANSE_GRAPHICS
		PROPERTY
		STRINGS ${SpaceXpanseExe_both} ${SpaceXpanseExe_graphics} ${SpaceXpanseExe_ng}
	)

endif()

if(NOT ${SPACEXPANSE_GRAPHICS} STREQUAL ${SpaceXpanseExe_ng})
	set(BUILD_SPACEXPANSE_DX7 1)
else()
	set(BUILD_SPACEXPANSE_DX7 0)
endif()
if(NOT ${SPACEXPANSE_GRAPHICS} STREQUAL ${SpaceXpanseExe_graphics})
	set(BUILD_SPACEXPANSE_SERVER 1)
else()
	set(BUILD_SPACEXPANSE_SERVER 0)
endif()

if(BUILD_SPACEXPANSE_DX7)
	set(SpaceXpanseTgt SpaceXpanse)
	set(SPACEXPANSE_LIB $<TARGET_LINKER_FILE:SpaceXpanse>)
else()
	set(SpaceXpanseTgt SpaceXpanse_server)
	set(SPACEXPANSE_LIB $<TARGET_LINKER_FILE:SpaceXpanse_server>)
endif()

# =====================================================================================
# Configure SpaceXpanse.cfg for externally installed planet textures

set(SPACEXPANSE_PLANET_TEXTURE_INSTALL_DIR
	${SPACEXPANSE_BINARY_ROOT_DIR}/Textures
	CACHE
	PATH
	"Planet texture installation directory (e.g. C:/SpaceXpanse2016/Textures)"
) 
string(COMPARE NOTEQUAL ${SPACEXPANSE_PLANET_TEXTURE_INSTALL_DIR} "${SPACEXPANSE_BINARY_ROOT_DIR}/Textures" CUSTOM_PLANET_TEXTURE_DIR)

if (${CUSTOM_PLANET_TEXTURE_DIR})
	string(REPLACE  "/" "\\" SPACEXPANSE_PLANET_TEXTURE_INSTALL_DIR_W "${SPACEXPANSE_PLANET_TEXTURE_INSTALL_DIR}")

	if(BUILD_SPACEXPANSE_DX7)
		configure_file(${SPACEXPANSE_SOURCE_DIR}/SpaceXpanse.cfg.in ${SPACEXPANSE_BINARY_ROOT_DIR}/SpaceXpanse.cfg)
		install(FILES
			${SPACEXPANSE_BINARY_ROOT_DIR}/SpaceXpanse.cfg
			DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
		)
	endif()
	
	if(BUILD_SPACEXPANSE_SERVER)
		configure_file(${SPACEXPANSE_SOURCE_DIR}/SpaceXpanse.cfg.in ${SPACEXPANSE_BINARY_ROOT_DIR}/SpaceXpanse_NG.cfg)
		install(FILES
			${SPACEXPANSE_BINARY_ROOT_DIR}/SpaceXpanse_NG.cfg
			DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
		)
	endif()
	
endif()


# =====================================================================================
# Find required and optional build tools

option(SPACEXPANSE_BUILD_WITH_DX7
	"Compile SpaceXpanse with built-in DX7 graphics. If off, the server version for external graphics clients will be built."
	ON
)

option(
	SPACEXPANSE_BUILD_D3D9CLIENT
	"Build the D3D9 graphics client"
	OFF
)

option(
	SPACEXPANSE_BUILD_XRSOUND
	"Build XRSound module to enable sound in SpaceXpanse"
	ON
#   OFF
)

option(SPACEXPANSE_MAKE_DOC
	"Create documentation"
	OFF
)

option(SPACEXPANSE_MAKE_TESTS
	"Build unit tests"
	OFF
)

option(SPACEXPANSE_MAKE_SDK_SAMPLES
	"Build the SDK sample projects"
	OFF
)

option(SPACEXPANSE_ENABLE_ASAN
	"Build binaries with Address Sanitizer"
	OFF
)

if(SPACEXPANSE_BUILD_XRSOUND)
	set(IRRKLANG_DIR
		irrKlang_NOTFOUND
		CACHE
		PATH
		"Root folder of irrKlang installation."
	)
endif()

if(SPACEXPANSE_BUILD_D3D9CLIENT)
	find_package(DXSDK
	)
	set(DXSDK_DIR
		${DXSDK_DIR}
		CACHE
		PATH
		"Installation directory of DirectX SDK (June 2010)"
	)
	if(${DXSDK_DIR} STREQUAL "DXSDK_DIR-NOTFOUND")
		message(WARNING "DirectX SDK not found. The D3D9 graphics client will not be built.")
		set(SPACEXPANSE_BUILD_D3D9CLIENT OFF)
	endif()
endif()

if (SPACEXPANSE_MAKE_DOC)

	find_program(ODT_TO_PDF_COMPILER
		soffice
		HINTS "/Program Files/LibreOffice/program"
	)

	set(ODT_TO_PDF_FLAGS
		"--headless --convert-to pdf --outdir <outdir> <infile>"
		CACHE
		STRING
		"Compiler options for the OdtToPdfCompiler"
	)

	find_program(DOC_TO_PDF_COMPILER
		soffice
		HINTS "/Program Files/LibreOffice/program"
	)

	set(DOC_TO_PDF_FLAGS
		"--headless --convert-to pdf --outdir <outdir> <infile>"
		CACHE
		STRING
		"Compiler options for the DocToPdfCompiler"
	)

endif()

# Enable Address SANitizer
if (SPACEXPANSE_ENABLE_ASAN AND MSVC)
    set(asan_binary_dir "$ENV{VCToolsInstallDir}bin\\Host${ARCH}\\${ARCH}")
    if (NOT EXISTS "${asan_binary_dir}")
		message( FATAL_ERROR "ASAN: Visual Studio tools directory ${asan_binary_dir} not valid, check VCToolsInstallDir environment variable" )
    endif()
    
	if (BUILD64)
		set(asan_arch_id "x86_64")
	else()
		set(asan_arch_id "i386")
	endif()
	set(asan_dll "clang_rt.asan_dynamic-${asan_arch_id}.dll")
	set(asan_dbg_dll "clang_rt.asan_dbg_dynamic-${asan_arch_id}.dll")
	
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /fsanitize=address /EHsc")
	add_custom_command(
		COMMENT "Copying ASAN Clang runtime from ${asan_binary_dir}"
		OUTPUT ${asan_dll}
 		OUTPUT ${asan_dbg_dll}
		COMMAND ${CMAKE_COMMAND} -E copy ${asan_binary_dir}\\${asan_dll} ${SPACEXPANSE_BINARY_ROOT_DIR}
		COMMAND ${CMAKE_COMMAND} -E copy ${asan_binary_dir}\\${asan_dbg_dll} ${SPACEXPANSE_BINARY_ROOT_DIR}
	)
    add_custom_target(AsanBinaries DEPENDS ${asan_dll})
    message("Address Sanitizer Enabled")
endif()

# For a given argument string template (odt_to_pdf_arglist) and source file name (infile)
# return the explicit argument string (arglist), full source path (source_path) and full target path (target_path)
# to invoke the ODT to PDF conversion tool

function(odt_to_pdf_arglist infile arglist source_path target_path)
	string(REPLACE
		"<outdir>" "${CMAKE_CURRENT_BINARY_DIR}"
		tmp1_string
		${ODT_TO_PDF_FLAGS}
	)
	string(REPLACE
		"<infile>" "${CMAKE_CURRENT_SOURCE_DIR}/${infile}.odt"
		tmp2_string
		${tmp1_string}
	)
	separate_arguments(odt_arg
		WINDOWS_COMMAND
		${tmp2_string}
	)
	set(${arglist} ${odt_arg} PARENT_SCOPE)
	set(${source_path} "${CMAKE_CURRENT_SOURCE_DIR}/${infile}.odt" PARENT_SCOPE)
	set(${target_path} "${CMAKE_CURRENT_BINARY_DIR}/${infile}.pdf" PARENT_SCOPE)
endfunction()


# For a given argument string template (odt_to_pdf_arglist) and source file name (infile)
# return the explicit argument string (arglist), full source path (source_path) and full target path (target_path)
# to invoke the DOC to PDF conversion tool

function(doc_to_pdf_arglist infile arglist source_path target_path)
	string(REPLACE
		"<outdir>" "${CMAKE_CURRENT_BINARY_DIR}"
		tmp1_string
		${DOC_TO_PDF_FLAGS}
	)
	string(REPLACE
		"<infile>" "${CMAKE_CURRENT_SOURCE_DIR}/${infile}.doc"
		tmp2_string
		${tmp1_string}
	)
	separate_arguments(doc_arg
		WINDOWS_COMMAND
		${tmp2_string}
	)
	set(${arglist} ${doc_arg} PARENT_SCOPE)
	set(${source_path} "${CMAKE_CURRENT_SOURCE_DIR}/${infile}.doc" PARENT_SCOPE)
	set(${target_path} "${CMAKE_CURRENT_BINARY_DIR}/${infile}.pdf" PARENT_SCOPE)
endfunction()

# Given a source directory (srcdir) and a target root directory (tgtroot),
# generate a list of all files found in srcdir (srclist) and a list of output files
# when the source directory is copied to the target root (tgtlist)
# For a copy_directory command, srclist can be used as dependencies, and tgtlist as output

function(srcdir_to_tgtlist srcdir tgtroot srclist tgtlist)
	file(GLOB_RECURSE infiles
		RELATIVE ${srcdir}
		${srcdir}/*
	)
	set(local_srclist ${infiles})
	list(TRANSFORM local_srclist PREPEND "${srcdir}/")
	set(local_tgtlist ${infiles})
	list(TRANSFORM local_tgtlist PREPEND "${tgtroot}/")
	set(srclist ${local_srclist} PARENT_SCOPE)
	set(tgtlist ${local_tgtlist} PARENT_SCOPE)
endfunction()


# Installation
install(DIRECTORY Scenarios Textures Meshes Config Script Flights BinAssets/
	DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
)
install(FILES ${LUA_DLL_DIR}/lua5.1.dll
	DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
)
install(FILES ${LUA_DLL_DIR}/lua5.1.lib
	DESTINATION ${SPACEXPANSE_INSTALL_SDK_DIR}/lib/Lua
)

set(CMAKE_MODULE_PATH
	${SPACEXPANSE_BINARY_ROOT_DIR}
    ${CMAKE_MODULE_PATH}
)

# Package required runtime libraries as an optional component
INSTALL(FILES ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}
	DESTINATION ${SPACEXPANSE_INSTALL_ROOT_DIR}
	COMPONENT RuntimeLibraries
	EXCLUDE_FROM_ALL
)

# Sub-projects
add_subdirectory(Src)
add_subdirectory(Utils)
add_subdirectory(SpaceXpansesdk)
add_subdirectory(OVP)
add_subdirectory(Sound)
add_subdirectory(Html)

if(SPACEXPANSE_MAKE_DOC)
	add_subdirectory(Doc)
endif()

# =============================================================================
# Set up Distribution package options

configure_file(${CMAKE_SOURCE_DIR}/cmake/CPackOptions.cmake.in
	${CMAKE_BINARY_DIR}/SpaceXpanseCPackOptions.cmake)
			   
set(CPACK_GENERATOR "WIX;ZIP")
set(CPACK_PACKAGE_NAME SpaceXpanse Metaverse Simulator)
set(CPACK_PACKAGE_VENDOR SpaceXpanse)
set(CPACK_PACKAGE_DESCRIPTION "SpaceXpanse Metaverse is an Open-source Simulator for Windows PCs.")
set(CPACK_PACKAGE_HOMEPAGE_URL http://spacexpanse.org)
set(CPACK_PACKAGE_EXECUTABLES SpaceXpanse;OpenSpaceXpanse)
set(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)
set(CPACK_COMPONENT_Unspecified_DISPLAY_NAME "SpaceXpanse Core Components")
set(CPACK_COMPONENT_Unspecified_REQUIRED TRUE)
set(CPACK_COMPONENT_RuntimeLibraries_DESCRIPTION "System libraries used by SpaceXpanse. Install if SpaceXpanse fails to launch.")
set(CPACK_RESOURCE_FILE_LICENSE ${SPACEXPANSE_SOURCE_ROOT_DIR}/cmake/LICENSE.rtf)
set(CPACK_RESOURCE_FILE_README ${SPACEXPANSE_SOURCE_ROOT_DIR}/README.md)
set(CPACK_WIX_UI_BANNER ${SPACEXPANSE_SOURCE_ROOT_DIR}/cmake/install_banner.bmp)
set(CPACK_WIX_UI_DIALOG ${SPACEXPANSE_SOURCE_ROOT_DIR}/cmake/install_bkg.bmp)
set(CPACK_WIX_PRODUCT_ICON ${SPACEXPANSE_SOURCE_ROOT_DIR}/cmake/spacexpanse_install.ico)
set(CPACK_WIX_UPGRADE_GUID AB3F6483-A1A4-4ECD-ADAE-D33DF3A5AADA)
set(CPACK_WIX_COMPONENT_INSTALL)
set(CPACK_PROJECT_CONFIG_FILE "${CMAKE_BINARY_DIR}/SpaceXpanseCPackOptions.cmake")

include(SpaceXpanseCPackOptions)
include(CPack)

cpack_add_component(Unspecified
	DISPLAY_NAME "SpaceXpanseCore"
	DESCRIPTION "SpaceXpanse Core Components"
	REQUIRED
)
cpack_add_component(RuntimeLibraries
	DISPLAY_NAME "RuntimeLibraries"
	DESCRIPTION "System libraries used by SpaceXpanse. Install if SpaceXpanse fails to launch."
)

# There appears to be a CMake (3.20.5) bug that prevents CMAKE_INSTALL_PREFIX to be set
# correctly in the CPACK_PRE_BUILD_SCRIPTS, so the script has been disabled for now
# This means that the planet texture installation directory is not reset to default
# for the packages. This needs to be fixed

#set(CPACK_PRE_BUILD_SCRIPTS ${SPACEXPANSE_SOURCE_ROOT_DIR}/cmake/cpack_install.cmake)

if (SPACEXPANSE_MAKE_TESTS)
      enable_testing()
      add_subdirectory(Tests)
endif()

if (SPACEXPANSE_ENABLE_ASAN AND MSVC)
	add_dependencies(SpaceXpanse_server AsanBinaries)
endif()
